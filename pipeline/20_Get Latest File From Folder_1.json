{
	"name": "20_Get Latest File From Folder_1",
	"properties": {
		"description": "Lets Say you have 10 files in a folder and you want to process only the latest file by comparing the last modified date .\n\nThis Pipeline is going to identify which file is the most recent file .",
		"activities": [
			{
				"name": "Get Metadata1",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_demo",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Filter1",
				"description": "As the Parent Folder \"demo\" has folders and files , this will filter down all folder types and keep only Type ='File'",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Get Metadata1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Metadata1').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type,'File' )",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter1').output.Value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Get Metadata2",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "ds_demo_file_details",
									"type": "DatasetReference",
									"parameters": {
										"parFileName": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"itemName",
									"lastModified"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							}
						},
						{
							"name": "Set B4LastModifiedDate",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Metadata2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "varB4FileModifiedDate",
								"value": {
									"value": "@variables('varA4FileModifiedDate')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set Final Last Modified Date",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set B4LastModifiedDate",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "varA4FileModifiedDate",
								"value": {
									"value": "@if(greater(activity('Get Metadata2').output.lastModified , variables('varB4FileModifiedDate')) , activity('Get Metadata2').output.lastModified , variables('varB4FileModifiedDate'))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set B4FileName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Metadata2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "varB4FileName",
								"value": {
									"value": "@variables('varA4FileName')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set Final File Name",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set B4FileName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "varA4FileName",
								"value": {
									"value": "@if(greater(activity('Get Metadata2').output.lastModified , variables('varB4FileModifiedDate')) , activity('Get Metadata2').output.itemName , variables('varB4FileName'))",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"wildcardFileName": {
								"value": "@variables('varA4FileName')",
								"type": "Expression"
							},
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_demo",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_target",
						"type": "DatasetReference",
						"parameters": {
							"parTargetFolderName": {
								"value": "Output/@{formatDateTime(utcnow(),'yyyy-MM-dd')}",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"variables": {
			"varB4FileModifiedDate": {
				"type": "String"
			},
			"varA4FileModifiedDate": {
				"type": "String"
			},
			"varB4FileName": {
				"type": "String"
			},
			"varA4FileName": {
				"type": "String"
			}
		},
		"folder": {
			"name": "ADF Practice"
		},
		"annotations": []
	}
}
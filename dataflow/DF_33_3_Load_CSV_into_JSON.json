{
	"name": "DF_33_3_Load_CSV_into_JSON",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerPurchases",
					"description": "Connect to Customer Purchases File"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Purchases",
					"description": "Create SubColumns here"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustId as integer,",
				"          CustName as string,",
				"          ItemName as string,",
				"          Quantity as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'demo',",
				"     folderPath: '33_Load_CSV_into_JSON',",
				"     fileName: 'CustomerPurchases.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> CustomerPurchases",
				"CustomerPurchases derive(Purchases = @(ItemName=ItemName,",
				"          Quantity=Quantity)) ~> Purchases",
				"Purchases aggregate(groupBy(CustId,",
				"          CustName),",
				"     Purchases = collect(Purchases)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'demo',",
				"     folderPath: (concat('Output','/','33_Load_CSV_into_JSON')),",
				"     truncate: true,",
				"     partitionFileNames:['CustomerPurchases.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}
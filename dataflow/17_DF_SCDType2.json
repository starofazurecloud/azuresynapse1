{
	"name": "17_DF_SCDType2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "EmployeeFile"
				},
				{
					"linkedService": {
						"referenceName": "ls_AzureSQLDB",
						"type": "LinkedServiceReference"
					},
					"name": "employeeTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_AzureSQLDB",
						"type": "LinkedServiceReference"
					},
					"name": "sinkToInsertOnly"
				},
				{
					"linkedService": {
						"referenceName": "ls_AzureSQLDB",
						"type": "LinkedServiceReference"
					},
					"name": "sink2Update"
				}
			],
			"transformations": [
				{
					"name": "addIsActiveColumn"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filterUnMatchedRows"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          salary as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'demo',",
				"     fileName: 'EmployeeFileForSCD2.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> EmployeeFile",
				"source(output(",
				"          empKey as integer,",
				"          empid as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          salary as integer,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Employee',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> employeeTable",
				"EmployeeFile derive(isActive = 1) ~> addIsActiveColumn",
				"employeeTable select(mapColumn(",
				"          SQL_empKey = empKey,",
				"          SQL_empid = empid,",
				"          SQL_empname = empname,",
				"          SQL_gender = gender,",
				"          SQL_country = country,",
				"          SQL_salary = salary,",
				"          SQL_isActive = isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"EmployeeFile, select1 lookup(empid == SQL_empid,",
				"     multiple: true,",
				"     broadcast: 'auto',",
				"     pickup: 'any')~> lookup1",
				"lookup1 filter(!isNull(SQL_empid)) ~> filterUnMatchedRows",
				"filterUnMatchedRows select(mapColumn(",
				"          SQL_empKey,",
				"          SQL_empid,",
				"          SQL_empname,",
				"          SQL_gender,",
				"          SQL_country,",
				"          SQL_salary,",
				"          SQL_isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(SQL_isActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
				"addIsActiveColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empKey as integer,",
				"          empid as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          salary as integer,",
				"          isActive as integer",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Employee',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empid,",
				"          empname,",
				"          gender,",
				"          country,",
				"          salary,",
				"          isActive",
				"     )) ~> sinkToInsertOnly",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empKey as integer,",
				"          empid as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          salary as integer,",
				"          isActive as integer",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Employee',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['empKey'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empKey = SQL_empKey,",
				"          empid = SQL_empid,",
				"          empname = SQL_empname,",
				"          gender = SQL_gender,",
				"          country = SQL_country,",
				"          salary = SQL_salary,",
				"          isActive = SQL_isActive",
				"     )) ~> sink2Update"
			]
		}
	}
}
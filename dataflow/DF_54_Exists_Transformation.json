{
	"name": "DF_54_Exists_Transformation",
	"properties": {
		"folder": {
			"name": "Practice_2"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "Employee"
				},
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "Department"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "WriteToInvalidEmployeeFile"
				},
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "WriteToValidEmployeesFile"
				}
			],
			"transformations": [
				{
					"name": "DepartmentExists"
				},
				{
					"name": "DepartmentNOTExists"
				},
				{
					"name": "RenameColumns"
				},
				{
					"name": "AddDepartmentNameasNULL"
				},
				{
					"name": "lookupDepartmentName"
				},
				{
					"name": "RenameColumnsForValidEmployees"
				}
			],
			"scriptLines": [
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'practice',",
				"     folderPath: 'input/VideoNo46_Mapping_Data_Flows',",
				"     fileName: 'employee.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Employee",
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'practice',",
				"     folderPath: 'input/VideoNo46_Mapping_Data_Flows',",
				"     fileName: 'department.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Department",
				"Employee, Department exists(toString(byName(\"department\",\"Employee\")) == toString(byName(\"depid\", \"Department\")),",
				"     negate:false,",
				"     broadcast: 'auto')~> DepartmentExists",
				"Employee, Department exists(toString(byName(\"department\",\"Employee\")) == toString(byName(\"depid\",\"Department\")),",
				"     negate:true,",
				"     broadcast: 'auto')~> DepartmentNOTExists",
				"AddDepartmentNameasNULL select(mapColumn(",
				"          each(match(name==\"emid\"),",
				"               \"EmployeeID\" = $$),",
				"          each(match(name==\"name\"),",
				"               \"EmployeeName\" = $$),",
				"          each(match(name==\"country\"),",
				"               \"Country\" = $$),",
				"          DepartmentName",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"DepartmentNOTExists derive(DepartmentName = \"\") ~> AddDepartmentNameasNULL",
				"DepartmentExists, Department lookup(toString(byName(\"department\")) == toString(byName(\"depid\")),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDepartmentName",
				"lookupDepartmentName select(mapColumn(",
				"          each(match(name==\"emid\"),",
				"               \"EmployeeID\" = $$),",
				"          each(match(name==\"name\"),",
				"               \"EmployeeName\" = $$),",
				"          each(match(name==\"country\"),",
				"               \"Country\" = $$),",
				"          each(match(name==\"depname\"),",
				"               \"DepartmentName\" = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> RenameColumnsForValidEmployees",
				"RenameColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'practice',",
				"     folderPath: (\"output/\"+toString(currentDate(),\"yyyy-MM-dd\")+\"/54\"),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['InValidEmployees.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WriteToInvalidEmployeeFile",
				"RenameColumnsForValidEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'practice',",
				"     folderPath: (\"output/\"+toString(currentDate(),\"yyyy-MM-dd\")+\"/54\"),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['ValidEmployees.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WriteToValidEmployeesFile"
			]
		}
	}
}
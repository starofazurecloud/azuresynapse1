{
	"name": "DF_35_1_Compare_Source_Target_MDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "SourceData"
				},
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "DataToCompareWith"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_azuresynapsecoursedl",
						"type": "LinkedServiceReference"
					},
					"name": "WritetoFile"
				}
			],
			"transformations": [
				{
					"name": "GenerateHashColumn"
				},
				{
					"name": "GenerateHasForTarget"
				},
				{
					"name": "SelectSourceColumns"
				},
				{
					"name": "SelectTargetColumns"
				},
				{
					"name": "DoexNotExists"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parTargetFolder as string (\"35_Compare_Source_Target_MDF\")",
				"}",
				"source(output(",
				"          Header as string,",
				"          Name as string,",
				"          Age as short,",
				"          {Batting style} as string,",
				"          {Bowling style} as string,",
				"          {Domestic team} as string,",
				"          {C/T} as string,",
				"          Forms as string,",
				"          {S/N} as short,",
				"          Captaincy as string,",
				"          {Last Test} as short,",
				"          {Last ODI} as string,",
				"          {Last T20I} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'demo',",
				"     folderPath: '35_Compare_Source_Target_MDF',",
				"     fileName: 'SourceData.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> SourceData",
				"source(output(",
				"          Header as string,",
				"          Name as string,",
				"          Age as short,",
				"          {Batting style} as string,",
				"          {Bowling style} as string,",
				"          {Domestic team} as string,",
				"          {C/T} as string,",
				"          Forms as string,",
				"          {S/N} as short,",
				"          Captaincy as string,",
				"          {Last Test} as string,",
				"          {Last ODI} as string,",
				"          {Last T20I} as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'demo',",
				"     folderPath: '35_Compare_Source_Target_MDF',",
				"     fileName: 'CompareWith.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DataToCompareWith",
				"SelectSourceColumns derive(HashValueSource = sha2(256,columns())) ~> GenerateHashColumn",
				"SelectTargetColumns derive(HashValueTarget = sha2(256,columns())) ~> GenerateHasForTarget",
				"SourceData select(mapColumn(",
				"          Header,",
				"          Name,",
				"          Age,",
				"          {Batting style},",
				"          {Bowling style}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSourceColumns",
				"DataToCompareWith select(mapColumn(",
				"          Header,",
				"          Name,",
				"          Age,",
				"          {Batting style},",
				"          {Bowling style}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTargetColumns",
				"GenerateHashColumn, GenerateHasForTarget exists(HashValueSource == HashValueTarget,",
				"     negate:true,",
				"     broadcast: 'auto')~> DoexNotExists",
				"DoexNotExists sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'demo',",
				"     folderPath: (concat('Output/',$parTargetFolder)),",
				"     truncate: true,",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['NonMatchingCrickters'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WritetoFile"
			]
		}
	}
}